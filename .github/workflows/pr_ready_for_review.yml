name: Handle PR Opened

on:
  pull_request:
    types: [ready_for_review]

jobs:
  handle-pr-opened:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract PR info
        id: extract
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          WORK_ITEM_ID=$(echo "$BRANCH_NAME" | grep -oE '[0-9]+' | head -n 1)
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "work_item_id=$WORK_ITEM_ID" >> $GITHUB_OUTPUT

      - name: Update Azure DevOps work item state and add PR comment
        if: steps.extract.outputs.work_item_id != ''
        env:
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        run: |
          WORK_ITEM_ID="${{ steps.extract.outputs.work_item_id }}"
          PR_URL="${{ steps.extract.outputs.pr_url }}"
          ORG="${{ vars.AZURE_DEVOPS_ORG }}"
          PROJECT="${{ vars.AZURE_DEVOPS_PROJECT }}"

          # Get current state of the work item
          CURRENT_STATE=$(curl -s -u ":$AZURE_DEVOPS_PAT" \
            -H "Accept: application/json" \
            "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/$WORK_ITEM_ID?api-version=7.1-preview.3" \
            | jq -r '.fields["System.State"]')

          echo "Current state: $CURRENT_STATE"

          if [ "$CURRENT_STATE" != "Ready for Code Review" ]; then
            echo "Updating state to 'Ready for Code Review'..."
            PATCH_DATA=$(jq -n '[{ "op": "add", "path": "/fields/System.State", "value": "Ready for Code Review" }]')          
            curl -X PATCH \
              -u ":$AZURE_DEVOPS_PAT" \
              -H "Content-Type: application/json-patch+json" \
              -d "$PATCH_DATA" \
              "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workitems/$WORK_ITEM_ID?api-version=7.1-preview.3"
          else
            echo "Work item already in 'Ready for Code Review' state. Skipping update."
          fi

          # Add comment with PR link
          COMMENT_HTML="PR is Ready for Code Review: <a href=\"$PR_URL/files\">$PR_URL</a><br/><br/>User Story state set to 'Ready for Code Review'<br/><br/><small>- Comment created by GitHub Action ðŸ¤–</small>"
          curl -X POST \
            -u ":$AZURE_DEVOPS_PAT" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg text "$COMMENT_HTML" '{text: $text}')" \
            "https://dev.azure.com/$ORG/$PROJECT/_apis/wit/workItems/$WORK_ITEM_ID/comments?api-version=7.1-preview.3"


      - name: Notify Teams with Adaptive Card
        if: steps.extract.outputs.work_item_id != ''
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.PULL_REQUESTS_TEAMS_WEBHOOK_URL }}
        run: |
          echo "ðŸ”§ Preparing Teams notification..."

          PR_URL="${{ steps.extract.outputs.pr_url }}"
          BRANCH_NAME="${{ steps.extract.outputs.branch }}"
          WORK_ITEM_ID="${{ steps.extract.outputs.work_item_id }}"
          ORG="${{ vars.AZURE_DEVOPS_ORG }}"
          PROJECT="${{ vars.AZURE_DEVOPS_PROJECT }}"
          WORK_ITEM_URL="https://dev.azure.com/$ORG/$PROJECT/_workitems/edit/$WORK_ITEM_ID"

          echo "ðŸ“¦ PR URL: $PR_URL"
          echo "ðŸŒ¿ Branch: $BRANCH_NAME"
          echo "ðŸ§© Work Item ID: $WORK_ITEM_ID"
          echo "ðŸ”— Work Item URL: $WORK_ITEM_URL"

          CARD=$(jq -n \
          --arg pr_url "$PR_URL" \
          --arg branch "$BRANCH_NAME" \
          --arg work_item_id "$WORK_ITEM_ID" \
          --arg work_item_url "$WORK_ITEM_URL" \
          '{
            "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
            "type": "AdaptiveCard",
            "version": "1.5",
            "body": [
              {
                "size": "Medium",
                "weight": "Bolder",
                "text": $branch
              },
              {
                "type": "TextBlock",
                "text": "Pull Request is ready for Code Review",
                "wrap": true
              }
            ],
            "actions": [
              {
                "type": "Action.OpenUrl",
                "title": "View Pull Request",
                "url": $pr_url
              },
              {
                "type": "Action.OpenUrl",
                "title": "View User Story #\($work_item_id)",
                "url": $work_item_url
              }
            ]
          }')


          echo "ðŸ“¤ Sending Adaptive Card to Teams..."
          curl -H "Content-Type: application/json" \
               -d "$CARD" \
               "$TEAMS_WEBHOOK_URL"

          echo "âœ… Teams notification sent."



